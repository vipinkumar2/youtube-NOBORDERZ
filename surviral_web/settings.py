"""
Django settings for surviral_web project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from django.utils.translation import gettext_lazy as _
# from dotenv import load_dotenv

import random

# load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "olh5uib9(3u!1$sl)z(0g@wno^=zqf5e2@8(0b5u00%p@^5n!6"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "*",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "dashboard",
    "django_cron",
    "background_task",
    "core",
    "instabot",
    "membership",
    "textTotags",
    "quick",
    "locale",
    "surviral_web",
    "youtubebot",
    "twitterbot",
    "telegram_bot",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "surviral_web.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "surviral_web.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.getenv("SURVIRAL_DATABASE_NAME", "surviral"),
        "USER": os.getenv("SURVIRAL_DATABASE_USER", "postgres"),
        "PASSWORD": os.getenv("SURVIRAL_DATABASE_PASSWORD", "0000"),
        "HOST": os.getenv("DATABASE_HOST", "localhost"),
        "PORT": os.getenv("DATABASE_PORT", "5432"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

CRON_CLASSES = [
    "quick.crons.CheckSubscription",
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGES = (
    ("en", _("English")),
    ("ja", _("Japanese")),
    ("ko", _("Korean")),
    ("zh-hans", _("Chinese")),
)

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]

LANGUAGE_CODE = "en"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# SendGrid API Key
SENDGRID_API_KEY = os.environ.get(
    "SENDGRID_API_KEY",
    "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",
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"


STATICFILES_DIRS = [
    BASE_DIR / "static",
]

AUTH_USER_MODEL = "core.User"
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


INSTABOT_URL = os.environ.get("INSTABOT_URL", "http://127.0.0.1:8001/api/")
HASHTAG_URL = os.environ.get("HASHTAG_URL", "http://127.0.0.0.1:8001/")


LOGIN_URL = "/advance/"
LOGIN_REDIRECT_URL = "/dashboard/"

try:
    from django.contrib.messages import constants as messages

    MESSAGE_TAGS = {
        messages.DEBUG: "alert-info",
        messages.INFO: "alert-info",
        messages.SUCCESS: "alert-success",
        messages.WARNING: "alert-warning",
        messages.ERROR: "alert-danger",
    }
except Exception as e:
    pass


STRIPE_PUBLISHABLE_KEY = os.environ.get("STRIPE_PUBLISHABLE_KEY")
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000000
MAX_UPLOAD_SIZE = "51000000"  # from KB to MB
CHROME_DRIVER_PATH = os.environ.get("CHROME_DRIVER_PATH")

# try:
#     from .prod import *
# except:
#     pass


# AWS CRED
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")


# Celery application definition
CELERY_BROKER_URL = "redis://localhost:6379"
CELERY_RESULT_BACKEND = "redis://localhost:6379"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"

# Twitter CRED
CONSUMER_KEY1 = os.environ.get("CONSUMER_KEY")
CONSUMER_SECRET1 = os.environ.get("CONSUMER_SECRET")
ACCESS_KEY1 = os.environ.get("ACCESS_KEY")
ACCESS_SECRET1 = os.environ.get("ACCESS_SECRET")

ConsumerKey2 = os.environ.get("ConsumerKey2")
ConsumerSecret2 = os.environ.get("ConsumerSecret2")
AccessKey2 = os.environ.get("AccessKey2")
AccessSecret2 = os.environ.get("AccessSecret2")

ConsumerKey3 = os.environ.get("ConsumerKey3")
ConsumerSecret3 = os.environ.get("ConsumerSecret3")
AccessKey3 = os.environ.get("AccessKey3")
AccessSecret3 = os.environ.get("AccessSecret3")

CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET = random.choice(
    (
        (CONSUMER_KEY1, CONSUMER_SECRET1, ACCESS_KEY1, ACCESS_SECRET1),
        (ConsumerKey2, ConsumerSecret2, AccessKey2, AccessSecret2),
        (ConsumerSecret3, ConsumerKey3, AccessKey3, AccessSecret3),
    )
)

# This will send error log into slack
SEND_LOG_TO_SLACK = os.environ.get("SEND_LOG_TO_SLACK", False)

# Twitter ART images
ART_IMAGE_DIR = os.environ.get("ART_IMAGE_DIR")
