from django.urls import path
from django.conf.urls import include
from dashboard import views, api_views
from django.contrib.auth.decorators import login_required
from django.views.decorators.csrf import csrf_exempt

urls = [
    path("tl/", login_required(views.TelegramDashboardIndexView.as_view()), name="tele_dashboard"),
    path("", login_required(views.DashboardIndexView.as_view()), name="dashboard"),
    path(
        "basic_details/",
        views.InstaAccountGeneralDetails.as_view(),
        name="basic_details",
    ),
    path(
        "action_details/",
        views.InstaAccountActionDetailsView.as_view(),
        name="action_details",
    ),
    path(
        "instagram/",
        login_required(views.DashboardInstagramView.as_view()),
        name="instagram",
    ),
    path(
        "add_instagram_account/",
        login_required(views.InstagramAccountView.as_view()),
        name="add_instagram_account",
    ),
    path(
        "delete_instagram_account/<int:delete_account>/",
        login_required(views.InstagramAccountView.as_view()),
        name="delete_instagram_account",
    ),
    path(
        "delete_instagram_account_quick/<int:delete_account>/",
        login_required(views.DeleteAccountQuickView.as_view()),
        name="delete_instagram_account_quick",
    ),
    path("post/", login_required(views.PostView.as_view()), name="post"),
    path(
        "publishall/",
        login_required(views.PublishAllView.as_view()),
        name="publish_all",
    ),
    path(
        "postimage/", login_required(views.PostImageView.as_view()), name="post_image"
    ),
    path(
        "post_video/", login_required(views.PostVideoView.as_view()), name="post_video"
    ),
    path(
        "create_story/",
        login_required(views.PostStoryView.as_view()),
        name="post_story",
    ),
    path(
        "instagram_post/",
        login_required(views.InstagramPostView.as_view()),
        name="instagram_post",
    ),
    path(
        "instagram_activity/<int:insta_user_id>/",
        login_required(views.InstagramActivityView.as_view()),
        name="instagram_activity",
    ),
    path(
        "instagram_analytics/",
        login_required(views.InstagramAnalyticsView.as_view()),
        name="instagram_analytics",
    ),
    path(
        "instagram_analytics/<int:insta_user_id>/",
        login_required(views.InstagramAnalyticsView.as_view()),
        name="instagram_analytics_with_id",
    ),
    path(
        "account_manager/",
        login_required(views.AccountManagerView.as_view()),
        name="account_manager",
    ),
    path(
        "file_manager/",
        login_required(views.FileManagerView.as_view()),
        name="file_manager",
    ),
    path(
        "group_manager/",
        login_required(views.GroupManagerView.as_view()),
        name="group_manager",
    ),
    path("caption/", login_required(views.CaptionView.as_view()), name="caption"),
    path("watermark/", login_required(views.WaterMarkView.as_view()), name="watermark"),
    path("pricing/", login_required(views.PricingView.as_view()), name="pricing"),
    path("settings/", login_required(views.SettingsView.as_view()), name="settings"),
    path("profile/", login_required(views.ProfileView.as_view()), name="profile"),
    path(
        "stats/<int:insta_user_id>/",
        login_required(views.StatsView.as_view()),
        name="stats",
    ),
    path(
        "log/<int:insta_user_id>/", login_required(views.LogView.as_view()), name="log"
    ),
    path(
        "log/<int:insta_user_id>/<str:option>/",
        login_required(views.LogView.as_view()),
        name="log_option",
    ),
    path(
        "log/delete_job/<int:insta_user_id>/<str:delete_job_id>/",
        login_required(views.LogView.as_view()),
        name="delete_log",
    ),
    path(
        "payment/<str:plan_id>/",
        login_required(views.PaymentView.as_view()),
        name="payment",
    ),
    path(
        "like_comment_post/",
        csrf_exempt(login_required(views.LikeCmntOnPostAPIView.as_view())),
        name="like_comment_post",
    ),
    path(
        "like_comment_followings/",
        csrf_exempt(login_required(views.LikeCmntOnFollowingPostAPIView.as_view())),
        name="like_comment_followings",
    ),
    path(
        "like_comment_followers/",
        csrf_exempt(login_required(views.LikeCmntOnFollowerPostAPIView.as_view())),
        name="like_comment_followers",
    ),
    path(
        "give_comment/",
        csrf_exempt(login_required(views.GiveYourCmntAPIView.as_view())),
        name="give_comment",
    ),
    path(
        "single_follow/",
        login_required(views.SingleFollowAPIView.as_view()),
        name="single_follow",
    ),
    path(
        "multiple_follow/",
        login_required(views.MultiFollowAPIView.as_view()),
        name="multiple_follow",
    ),
    path(
        "multiple_unfollow/",
        login_required(views.MultiUnfollowAPIView.as_view()),
        name="multiple_unfollow",
    ),
    path(
        "hashtags_follow/",
        login_required(views.HashtagsFollowView.as_view()),
        name="hashtags_follow",
    ),
    path(
        "advanced_hashtags_follow/",
        login_required(views.AdvancedHashtagsFollowView.as_view()),
        name="advanced_hashtags_follow",
    ),
    path(
        "auto_direct_message/",
        login_required(views.AutoDirectMessageView.as_view()),
        name="auto-direct-message",
    ),
    path(
        "story_direct_message/",
        login_required(views.StoryDirectMessageView.as_view()),
        name="story-direct-message",
    ),
    path(
        "auto_reply/",
        login_required(views.AutoReplyCommentView.as_view()),
        name="auto-reply-comment",
    ),
    path(
        "direct_message_status/",
        login_required(views.DirectMessageStatus.as_view()),
        name="direct-message-status",
    ),
    path(
        "story_direct_message_status/",
        login_required(views.StoryDirectMessageStatus.as_view()),
        name="story-direct-message-status",
    ),
    path(
        "reply_comment_status/",
        login_required(views.ReplyCommentStatus.as_view()),
        name="reply-comment-status",
    ),
    path(
        "hashtags_like/",
        login_required(views.HashTagsLikeView.as_view()),
        name="hashtags_like",
    ),
    path(
        "insert_otp/", login_required(views.InsertOTPView.as_view()), name="insert_otp"
    ),
    path(
        "check_otp_status/",
        login_required(api_views.CheckLoginStatus.as_view()),
        name="check_otp_status",
    ),
    path("schedules/", login_required(views.SchedulesView.as_view()), name="schedules"),
    path(
        "activity_filter/", api_views.ActivityFilter.as_view(), name="activity_filter"
    ),
    path(
        "automation_status/",
        api_views.UserAccountAutoStatus.as_view(),
        name="automation_status",
    ),
    path(
        "get_user_account_details/",
        api_views.GetUserAccountDetails.as_view(),
        name="get_user_account_details",
    ),
    path("create_bot/", views.CreateInstagramBot.as_view(), name="create_bot"),
    path(
        "post_multi_image/",
        login_required(views.PostMultiImageView.as_view()),
        name="post_multi_image",
    ),
    path(
        "create_group/",
        login_required(views.CreateGroup.as_view()),
        name="create_group",
    ),
    path(
        "lint_to_group/<int:group_id>/",
        login_required(views.LinkToGroupView.as_view()),
        name="lint_to_group",
    ),
    path(
        "list_insta_account/<int:group_id>",
        login_required(views.ListInstAccountView.as_view()),
        name="list_insta_account",
    ),
    path(
        "link_to_account/",
        login_required(views.LinkToGroupView.as_view()),
        name="lint_to_account",
    ),
    # path('link_to_account/', login_required(views.LinkToGroupView.as_view()),
    #      name="lint_to_account"),
    path(
        "remove_from_group/<int:insta_id>/",
        login_required(views.GroupManagerView.as_view()),
        name="remove_from_group",
    ),
    path(
        "delete_grpup/<int:group_id>/",
        login_required(views.DeleteGroupView.as_view()),
        name="delete_grpup",
    ),
    path(
        "like_video/",
        login_required(views.LikeOnYoutubeVideoAPIView.as_view()),
        name="like_video",
    ),
    path(
        "dislike_video/",
        login_required(views.DislikeOnYoutubeVideoAPIView.as_view()),
        name="dislike_video",
    ),
    path(
        "comment_video/",
        login_required(views.CommentOnYoutubeVideoAPIView.as_view()),
        name="comment_video",
    ),
    path(
        "youtube_manager/",
        login_required(views.YoutubeManagerView.as_view()),
        name="youtube_manager",
    ),
    path(
        "subscribe_channel/",
        login_required(views.SubscribeChannelAPIView.as_view()),
        name="subscribe_channel",
    ),
    path("youtube_callback/", views.youtube_callbackurl, name="youtube_callback"),
    path(
        "views_video/",
        login_required(views.ViewsYoutubeVideoAPIView.as_view()),
        name="views_video",
    ),
    path(
        "upload_video/",
        login_required(views.VideoUploadOnYoutubeAPIView.as_view()),
        name="upload_video",
    ),
    path(
        "youtube_group_manager/",
        login_required(views.YoutubeGroupManagerView.as_view()),
        name="youtube_group_manager",
    ),
    path(
        "create_youtube_group/",
        login_required(views.CreateYoutubeGroup.as_view()),
        name="create_youtube_group",
    ),
    path(
        "link_youtube_group/<int:group_id>/",
        login_required(views.LinkToYoutubeGroupView.as_view()),
        name="link_youtube_group",
    ),
    path(
        "list_youtube_account/<int:group_id>",
        login_required(views.ListYoutubeAccountView.as_view()),
        name="list_youtube_account",
    ),
    path(
        "remove_youtube_group/<int:youtube_id>/",
        login_required(views.YoutubeGroupManagerView.as_view()),
        name="remove_youtube_group",
    ),
    path(
        "delete_youtube_group/<int:group_id>/",
        login_required(views.DeleteYoutubeGroupView.as_view()),
        name="delete_youtube_group",
    ),
    path(
        "edit_job/<int:job_id>/",
        login_required(views.EditJobView.as_view()),
        name="edit_job",
    ),
    path(
        "edit_multifollow_job/<int:job_id>/",
        login_required(views.MultiFollowEditAPIView.as_view()),
        name="edit_multifollow_job",
    ),
    path(
        "edit_manual_cmnt/<int:job_id>/",
        login_required(views.EditGiveYourCmntAPIView.as_view()),
        name="edit_manual_cmnt",
    ),
    path(
        "edit_single_follow/<int:job_id>/",
        login_required(views.EditSingleFollowAPIView.as_view()),
        name="edit_single_follow",
    ),
    path(
        "edit_like_cmnt/<int:job_id>/",
        login_required(views.EditLikeCmntOnFollowerPostAPIView.as_view()),
        name="edit_like_cmnt",
    ),
    path(
        "edit_hashtags_like/<int:job_id>/",
        login_required(views.EditHashTagsLikeView.as_view()),
        name="edit_hashtags_like",
    ),
    path(
        "edit_like_comment_post/<int:job_id>/",
        login_required(views.EditLikeCmntOnPostAPIView.as_view()),
        name="edit_like_comment_post",
    ),
    path(
        "edit_hashtags_follow/<int:job_id>/",
        login_required(views.EditHashtagsFollowView.as_view()),
        name="edit_hashtags_follow",
    ),
    path(
        "edit_like_comment_followings/<int:job_id>/",
        login_required(views.EditLikeCmntOnFollowingPostAPIView.as_view()),
        name="edit_like_comment_followings",
    ),
    path(
        "edit_create_story/<int:job_id>/",
        login_required(views.EditsPostStoryView.as_view()),
        name="edit_create_story",
    ),
]
urlpatterns = urls
